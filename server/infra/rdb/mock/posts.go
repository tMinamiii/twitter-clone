// Code generated by MockGen. DO NOT EDIT.
// Source: posts.go

// Package mock_rdb is a generated GoMock package.
package mock_rdb

import (
	context "context"
	reflect "reflect"
	domain "tMinamiii/Tweet/domain"

	dbr "github.com/gocraft/dbr"
	gomock "github.com/golang/mock/gomock"
)

// MockPosts is a mock of Posts interface.
type MockPosts struct {
	ctrl     *gomock.Controller
	recorder *MockPostsMockRecorder
}

// MockPostsMockRecorder is the mock recorder for MockPosts.
type MockPostsMockRecorder struct {
	mock *MockPosts
}

// NewMockPosts creates a new mock instance.
func NewMockPosts(ctrl *gomock.Controller) *MockPosts {
	mock := &MockPosts{ctrl: ctrl}
	mock.recorder = &MockPostsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPosts) EXPECT() *MockPostsMockRecorder {
	return m.recorder
}

// CreateTx mocks base method.
func (m *MockPosts) CreateTx(ctx context.Context, tx dbr.SessionRunner, userID int64, content string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, userID, content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockPostsMockRecorder) CreateTx(ctx, tx, userID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockPosts)(nil).CreateTx), ctx, tx, userID, content)
}

// LoadByUUIDTx mocks base method.
func (m *MockPosts) LoadByUUIDTx(ctx context.Context, tx dbr.SessionRunner, uuid string) (*domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByUUIDTx", ctx, tx, uuid)
	ret0, _ := ret[0].(*domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByUUIDTx indicates an expected call of LoadByUUIDTx.
func (mr *MockPostsMockRecorder) LoadByUUIDTx(ctx, tx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByUUIDTx", reflect.TypeOf((*MockPosts)(nil).LoadByUUIDTx), ctx, tx, uuid)
}
