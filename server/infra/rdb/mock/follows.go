// Code generated by MockGen. DO NOT EDIT.
// Source: follows.go

// Package mock_rdb is a generated GoMock package.
package mock_rdb

import (
	context "context"
	reflect "reflect"
	domain "tMinamiii/Tweet/domain"

	dbr "github.com/gocraft/dbr"
	gomock "github.com/golang/mock/gomock"
)

// MockFollows is a mock of Follows interface.
type MockFollows struct {
	ctrl     *gomock.Controller
	recorder *MockFollowsMockRecorder
}

// MockFollowsMockRecorder is the mock recorder for MockFollows.
type MockFollowsMockRecorder struct {
	mock *MockFollows
}

// NewMockFollows creates a new mock instance.
func NewMockFollows(ctrl *gomock.Controller) *MockFollows {
	mock := &MockFollows{ctrl: ctrl}
	mock.recorder = &MockFollowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollows) EXPECT() *MockFollowsMockRecorder {
	return m.recorder
}

// CreateTx mocks base method.
func (m *MockFollows) CreateTx(ctx context.Context, tx dbr.SessionRunner, userID, followUserID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, userID, followUserID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockFollowsMockRecorder) CreateTx(ctx, tx, userID, followUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockFollows)(nil).CreateTx), ctx, tx, userID, followUserID)
}

// DeleteTx mocks base method.
func (m *MockFollows) DeleteTx(ctx context.Context, tx dbr.SessionRunner, userID, followUserID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", ctx, tx, userID, followUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockFollowsMockRecorder) DeleteTx(ctx, tx, userID, followUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockFollows)(nil).DeleteTx), ctx, tx, userID, followUserID)
}

// LoadByUserID mocks base method.
func (m *MockFollows) LoadByUserID(ctx context.Context, userID int64) (*[]domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByUserID", ctx, userID)
	ret0, _ := ret[0].(*[]domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByUserID indicates an expected call of LoadByUserID.
func (mr *MockFollowsMockRecorder) LoadByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByUserID", reflect.TypeOf((*MockFollows)(nil).LoadByUserID), ctx, userID)
}

// LoadByUserIDAndFollowUserID mocks base method.
func (m *MockFollows) LoadByUserIDAndFollowUserID(ctx context.Context, userID, followUserID int64) (*domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByUserIDAndFollowUserID", ctx, userID, followUserID)
	ret0, _ := ret[0].(*domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByUserIDAndFollowUserID indicates an expected call of LoadByUserIDAndFollowUserID.
func (mr *MockFollowsMockRecorder) LoadByUserIDAndFollowUserID(ctx, userID, followUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByUserIDAndFollowUserID", reflect.TypeOf((*MockFollows)(nil).LoadByUserIDAndFollowUserID), ctx, userID, followUserID)
}

// LoadByUserIDAndFollowUserIDTx mocks base method.
func (m *MockFollows) LoadByUserIDAndFollowUserIDTx(ctx context.Context, tx dbr.SessionRunner, userID, followUserID int64) (*domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByUserIDAndFollowUserIDTx", ctx, tx, userID, followUserID)
	ret0, _ := ret[0].(*domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByUserIDAndFollowUserIDTx indicates an expected call of LoadByUserIDAndFollowUserIDTx.
func (mr *MockFollowsMockRecorder) LoadByUserIDAndFollowUserIDTx(ctx, tx, userID, followUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByUserIDAndFollowUserIDTx", reflect.TypeOf((*MockFollows)(nil).LoadByUserIDAndFollowUserIDTx), ctx, tx, userID, followUserID)
}

// LoadByUserIDAndFollowUserIDs mocks base method.
func (m *MockFollows) LoadByUserIDAndFollowUserIDs(ctx context.Context, userID int64, followUserIDs []int64) (*[]domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByUserIDAndFollowUserIDs", ctx, userID, followUserIDs)
	ret0, _ := ret[0].(*[]domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByUserIDAndFollowUserIDs indicates an expected call of LoadByUserIDAndFollowUserIDs.
func (mr *MockFollowsMockRecorder) LoadByUserIDAndFollowUserIDs(ctx, userID, followUserIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByUserIDAndFollowUserIDs", reflect.TypeOf((*MockFollows)(nil).LoadByUserIDAndFollowUserIDs), ctx, userID, followUserIDs)
}
