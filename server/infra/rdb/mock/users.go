// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package mock_rdb is a generated GoMock package.
package mock_rdb

import (
	context "context"
	reflect "reflect"
	domain "tMinamiii/Tweet/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// FindByUsername mocks base method.
func (m *MockUsers) FindByUsername(ctx context.Context, exceptUserIDs []int64, username string) (*[]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, exceptUserIDs, username)
	ret0, _ := ret[0].(*[]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUsersMockRecorder) FindByUsername(ctx, exceptUserIDs, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUsers)(nil).FindByUsername), ctx, exceptUserIDs, username)
}

// LoadByAccountID mocks base method.
func (m *MockUsers) LoadByAccountID(ctx context.Context, accountID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByAccountID", ctx, accountID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByAccountID indicates an expected call of LoadByAccountID.
func (mr *MockUsersMockRecorder) LoadByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByAccountID", reflect.TypeOf((*MockUsers)(nil).LoadByAccountID), ctx, accountID)
}

// LoadByID mocks base method.
func (m *MockUsers) LoadByID(ctx context.Context, id int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByID indicates an expected call of LoadByID.
func (mr *MockUsersMockRecorder) LoadByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByID", reflect.TypeOf((*MockUsers)(nil).LoadByID), ctx, id)
}
