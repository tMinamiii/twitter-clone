// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	request "tMinamiii/Tweet/request"
	response "tMinamiii/Tweet/response"

	gomock "github.com/golang/mock/gomock"
)

// MockPost is a mock of Post interface.
type MockPost struct {
	ctrl     *gomock.Controller
	recorder *MockPostMockRecorder
}

// MockPostMockRecorder is the mock recorder for MockPost.
type MockPostMockRecorder struct {
	mock *MockPost
}

// NewMockPost creates a new mock instance.
func NewMockPost(ctrl *gomock.Controller) *MockPost {
	mock := &MockPost{ctrl: ctrl}
	mock.recorder = &MockPostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPost) EXPECT() *MockPostMockRecorder {
	return m.recorder
}

// SubmitPost mocks base method.
func (m *MockPost) SubmitPost(ctx context.Context, req *request.SubmitPostRequest) (*response.SubmitPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPost", ctx, req)
	ret0, _ := ret[0].(*response.SubmitPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitPost indicates an expected call of SubmitPost.
func (mr *MockPostMockRecorder) SubmitPost(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPost", reflect.TypeOf((*MockPost)(nil).SubmitPost), ctx, req)
}

// Timeline mocks base method.
func (m *MockPost) Timeline(ctx context.Context, req *request.TimelineRequest) (*response.TimelineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeline", ctx, req)
	ret0, _ := ret[0].(*response.TimelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Timeline indicates an expected call of Timeline.
func (mr *MockPostMockRecorder) Timeline(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeline", reflect.TypeOf((*MockPost)(nil).Timeline), ctx, req)
}
