// Code generated by MockGen. DO NOT EDIT.
// Source: follow.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	request "tMinamiii/Tweet/request"
	response "tMinamiii/Tweet/response"

	gomock "github.com/golang/mock/gomock"
)

// MockFollow is a mock of Follow interface.
type MockFollow struct {
	ctrl     *gomock.Controller
	recorder *MockFollowMockRecorder
}

// MockFollowMockRecorder is the mock recorder for MockFollow.
type MockFollowMockRecorder struct {
	mock *MockFollow
}

// NewMockFollow creates a new mock instance.
func NewMockFollow(ctrl *gomock.Controller) *MockFollow {
	mock := &MockFollow{ctrl: ctrl}
	mock.recorder = &MockFollowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollow) EXPECT() *MockFollowMockRecorder {
	return m.recorder
}

// FollowUser mocks base method.
func (m *MockFollow) FollowUser(ctx context.Context, req *request.FollowUserRequest) (*response.FollowUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", ctx, req)
	ret0, _ := ret[0].(*response.FollowUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockFollowMockRecorder) FollowUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockFollow)(nil).FollowUser), ctx, req)
}

// UnFollowUser mocks base method.
func (m *MockFollow) UnFollowUser(ctx context.Context, req *request.UnFollowUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnFollowUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnFollowUser indicates an expected call of UnFollowUser.
func (mr *MockFollowMockRecorder) UnFollowUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnFollowUser", reflect.TypeOf((*MockFollow)(nil).UnFollowUser), ctx, req)
}
